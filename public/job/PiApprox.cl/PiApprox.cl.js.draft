<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
    <title>WebCL Benchmark</title>
    <script type="text/javascript">
    function CL_vectorAdd () {

            // All output is written to element by id "output"
        var output = document.getElementById("output");
        output.innerHTML = "";

        try {
        	    niter = 1024;
            var sourc_str = 
        " \
ulong MWC_AddMod64(ulong a, ulong b, ulong M) \
{ \
	ulong v=a+b; \
	if( (v>=M) || (v<a) ) \
		v=v-M; \
	return v; \
} \
 \
ulong MWC_MulMod64(ulong a, ulong b, ulong M) \
{ \
	ulong r=0; \
	while(a!=0){ \
		if(a&1) \
			r=MWC_AddMod64(r,b,M); \
		b=MWC_AddMod64(b,b,M); \
		a=a>>1; \
	} \
	return r; \
} \
 \
ulong MWC_PowMod64(ulong a, ulong e, ulong M) \
{ \
	ulong sqr=a, acc=1; \
	while(e!=0){ \
		if(e&1) \
			acc=MWC_MulMod64(acc,sqr,M); \
		sqr=MWC_MulMod64(sqr,sqr,M); \
		e=e>>1; \
	} \
	return acc; \
} \
 \
uint2 MWC_SkipImpl_Mod64(uint2 curr, ulong A, ulong M, ulong distance) \
{ \
	ulong m=MWC_PowMod64(A, distance, M); \
	ulong x=curr.x*(ulong)A+curr.y; \
	x=MWC_MulMod64(x, m, M); \
	return (uint2)((uint)(x/A), (uint)(x%A)); \
} \
 \
uint2 MWC_SeedImpl_Mod64(ulong A, ulong M, uint vecSize, uint vecOffset, ulong streamBase, ulong streamGap) \
{ \
	enum{ MWC_BASEID = 4077358422479273989UL }; \
	\
	ulong dist=streamBase + (get_global_id(0)*vecSize+vecOffset)*streamGap; \
	ulong m=MWC_PowMod64(A, dist, M); \
	 \
	ulong x=MWC_MulMod64(MWC_BASEID, m, M); \
	return (uint2)((uint)(x/A), (uint)(x%A)); \
} \
 \
typedef struct{ uint x; uint c; } mwc64x_state_t; \
 \
enum{ MWC64X_A = 4294883355U }; \
enum{ MWC64X_M = 18446383549859758079UL }; \
 \
void MWC64X_Step(mwc64x_state_t *s) \
{ \
	uint X=s->x, C=s->c; \
	\
	uint Xn=MWC64X_A*X+C; \
	uint carry=(uint)(Xn<C); \
	uint Cn=mad_hi(MWC64X_A,X,carry); \
\
	s->x=Xn; \
	s->c=Cn; \
} \
 \
void MWC64X_Skip(mwc64x_state_t *s, ulong distance) \
{ \
	uint2 tmp=MWC_SkipImpl_Mod64((uint2)(s->x,s->c), MWC64X_A, MWC64X_M, distance); \
	s->x=tmp.x; \
	s->c=tmp.y; \
} \
 \
void MWC64X_SeedStreams(mwc64x_state_t *s, ulong baseOffset, ulong perStreamOffset) \
{ \
	uint2 tmp=MWC_SeedImpl_Mod64(MWC64X_A, MWC64X_M, 1, 0, baseOffset, perStreamOffset); \
	s->x=tmp.x; \
	s->c=tmp.y; \
} \
 \
uint MWC64X_NextUint(mwc64x_state_t *s) \
{ \
	uint res=s->x ^ s->c; \
	MWC64X_Step(s); \
	return res; \
} \
 \
__kernel void pi_approx(__global float *count) { \
	mwc64x_state_t rng; \
    	int i = get_global_id(0); \
   	ulong samplesPerStream=i/get_global_size(0); \
    	MWC64X_SeedStreams(&rng, i, 2*samplesPerStream); \
	\
	float x = convert_float(MWC64X_NextUint(&rng)) / UINT_MAX; \
	float y = convert_float(MWC64X_NextUint (&rng)) / UINT_MAX; \
	float z = x*x+y*y; \
	if (z <= 1) count[i]++; \
 \
} \
    "
		    var source_size = source_str.length;

		    // Setup WebCL context using the default device of the first platform
		    var platform_id = WebCL.getPlatformIDs();
		    var context = WebCL.createContextFromType ([WebCL.CL_CONTEXT_PLATFORM, platform_id[0]], WebCL.CL_DEVICE_TYPE_CPU);
		    var device_id = context.getContextInfo(WebCL.CL_CONTEXT_DEVICES);
		    var command_queue = context.createCommandQueue(device_id[0], WebCL.CL_QUEUE_PROFILING_ENABLE);
		    
		    var program = context.createProgramWithSource(source_str);
		    program.buildProgram([device_id[0]], "");

		    var kernel = program.createKernel("pi_approx");    
		    var count_mem_obj = context.createBuffer(WebCL.CL_MEM_WRITE_ONLY, niter * 4);
		    kernel.setKernelArg(0, count_mem_obj);

		    var perf_evt;
		    var global_item_size = niter;
		    var local_item_size = 64;

		    // Execute (enqueue) kernel
		    perf_evt = command_queue.enqueueNDRangeKernel(kernel, 1, [],
			[global_item_size], [local_item_size], []); // PERFORMANCE DONE?
		    WebCL.waitForEvents([perf_evt]); // PERFORMANCE

		    // Read the result buffer from OpenCL device
		    var count = new Float32Array(niter);
		    command_queue.enqueueReadBuffer (count_mem_obj, true, 0, niter * 4, count, []);
		    var countReduced = 0;
		    for (var i = 0; i < niter; ++i) {
			countReduced += count[i];
			output.innerHTML += count[i] + ", ";
		    }
		    command_queue.flush();
		    command_queue.finish(); //Finish all the operations
		    kernel.releaseCLResources();
		    program.releaseCLResources();
		    count_mem_obj.releaseCLResources();
		    command_queue.releaseCLResources();
		    context.releaseCLResources();
            } catch(e) {
                document.getElementById("output").innerHTML
                        += "<h3>ERROR:</h3><pre style=\"color:red;\">" + e.lineNumber + ": " + e.message + "</pre>";
                throw e;
            }
        }
    </script>
</head>
<body>
    <div id="output"></div>
    <button onclick="CL_vectorAdd()">perform nokia tutorial</button>
</body>
</html>
