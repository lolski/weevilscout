# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="CHANGEME12345678-nmd101ra5d726f8aibf2rm8tnbdi0dt9sgaaog5ct8a3a47m4ul"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router 
# ~~~~~
# Define the Router object to use for this application.
# Default to Routes in the root package.
# appliclation.routers=my.application.Routes

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db.default.driver=com.mysql.jdbc.Driver
db.default.url="jdbc:mysql://localhost/weevilscout?zeroDateTimeBehavior=convertToNull"
db.default.user=weevilscout
db.default.password=hopipola

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG


#SARA
#db.default.partitionCount=10
#db.default.maxConnectionsPerPartition=100
#db.default.minConnectionsPerPartition=10
#db.default.acquireIncrement=10
#db.default.acquireRetryAttempts=5
#db.default.acquireRetryDelay=5 seconds
#db.default.connectionTimeout=2 seconds
#db.default.idleConnectionTestPeriod= 10 seconds

play {

    akka {

        actor {

            deployment {

                /actions {
                    router = round-robin
                    nr-of-instances = 100
                }

                /promises {
                    router = round-robin
                    nr-of-instances = 100
                }

            }

            retrieveBodyParserTimeout = 50 seconds

            actions-dispatcher = {
                fork-join-executor {
                    parallelism-factor = 100
                    parallelism-max = 100
                }
            }

            promises-dispatcher = {
                fork-join-executor {
                    parallelism-factor = 100
                    parallelism-max = 100
                }
            }

        }

    }

}